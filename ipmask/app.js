// Generated by IcedCoffeeScript 108.0.9
var MaskCanvas, cidr, cidr2range, cidrs, cursor_ip, cvs, d2xy, ip2dec, ip2hex, mask_cvs, rot, xy2d, _i, _len, _ref,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

rot = function(n, p, r) {
  var _ref;
  if (r.y === 0) {
    if (r.x === 1) {
      p.x = n - 1 - p.x;
      p.y = n - 1 - p.y;
    }
    _ref = [p.y, p.x], p.x = _ref[0], p.y = _ref[1];
  }
  return p;
};

xy2d = function(n, p) {
  var d, r, s;
  d = 0;
  r = {};
  s = n >> 1;
  while (s > 0) {
    r.x = (p.x & s) > 0;
    r.y = (p.y & s) > 0;
    d += s * s * ((3 * r.x) ^ r.y);
    p = rot(s, p, r);
    s = s >> 1;
  }
  return d;
};

d2xy = function(n, d) {
  var p, r, s, t;
  t = d;
  p = {
    x: 0,
    y: 0
  };
  r = {};
  s = 1;
  while (s < n) {
    r.x = 1 & (t >> 1);
    r.y = 1 & (t ^ r.x);
    p = rot(s, p, r);
    p.x += s * r.x;
    p.y += s * r.y;
    t = t >> 2;
    s = s << 1;
  }
  return p;
};

cidr2range = function(cidr) {
  var end, ip, mask, start, _ref;
  _ref = cidr.split("/"), ip = _ref[0], mask = _ref[1];
  console.log(cidr, ip, mask);
  mask = parseInt(mask, 10) >>> 0;
  mask = (-1) << (32 - mask) >>> 0;
  ip = ip.split(".").map(function(a) {
    return parseInt(a, 10);
  });
  ip = ip[0] << 24 | ip[1] << 16 | ip[2] << 8 | ip[3] >>> 0;
  start = ip & mask >>> 0;
  end = start | ~mask >>> 0;
  return {
    start: start,
    end: end
  };
};

ip2hex = function(ip) {
  return ("00000000" + (ip.toString(16))).slice(-8);
};

ip2dec = function(ip) {
  var i;
  ip = ip2hex(ip);
  return ip = ((function() {
    var _i, _results;
    _results = [];
    for (i = _i = 0; _i <= 3; i = ++_i) {
      _results.push("" + (parseInt(ip.slice(i * 2, +(i * 2 + 1) + 1 || 9e9), 16)));
    }
    return _results;
  })()).join(".");
};

MaskCanvas = (function() {
  function MaskCanvas(cvs, size) {
    this.cvs = cvs;
    this.size = size != null ? size : 0;
    this.mousemove = __bind(this.mousemove, this);
    this.plot_cidr = __bind(this.plot_cidr, this);
    this.ctx = this.cvs.getContext("2d");
    this.h = this.w = this.cvs.height = this.cvs.width = 1 << (8 + this.size);
    this.b = cvs.getBoundingClientRect();
    this.cvs.addEventListener("mousemove", this.mousemove);
  }

  MaskCanvas.prototype.plot_cidr = function(cidr, color) {
    var d, id, l, p, range, _i, _ref, _ref1;
    id = this.ctx.getImageData(0, 0, this.w, this.h);
    d = id.data;
    range = cidr2range(cidr);
    console.log(ip2hex(range.start), ip2hex(range.end));
    range.start = range.start >> 2 * (8 - this.size) >>> 0;
    range.end = range.end >> 2 * (8 - this.size) >>> 0;
    console.log(range.start, range.end);
    for (l = _i = _ref = range.start, _ref1 = range.end; _ref <= _ref1 ? _i <= _ref1 : _i >= _ref1; l = _ref <= _ref1 ? ++_i : --_i) {
      p = d2xy(this.h, l);
      d[(p.x + p.y * this.w) * 4 + 0] = color.r;
      d[(p.x + p.y * this.w) * 4 + 1] = color.g;
      d[(p.x + p.y * this.w) * 4 + 2] = color.b;
      d[(p.x + p.y * this.w) * 4 + 3] = color.a;
    }
    return this.ctx.putImageData(id, 0, 0);
  };

  MaskCanvas.prototype.mousemove = function(e) {
    var ip, x, y;
    x = e.clientX - this.b.left;
    y = e.clientY - this.b.top;
    console.log(x, y);
    ip = xy2d(this.h, {
      x: x,
      y: y
    });
    console.log(ip.toString(16));
    ip = ip << (8 - this.size) * 2 >>> 0;
    return cursor_ip.innerHTML = "" + (ip2hex(ip)) + "\n" + (ip2dec(ip));
  };

  return MaskCanvas;

})();

cidrs = document.getElementById("cidrs");

cvs = document.getElementById("cvs");

cursor_ip = document.getElementById("ip");

mask_cvs = new MaskCanvas(cvs, 2);

console.log(cidrs.innerHTML);

_ref = cidrs.innerHTML.split("\n");
for (_i = 0, _len = _ref.length; _i < _len; _i++) {
  cidr = _ref[_i];
  mask_cvs.plot_cidr(cidr, {
    r: 0,
    g: 0,
    b: 0,
    a: 128
  });
}

console.log("start");
